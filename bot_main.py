import asyncio
import logging
import sqlite3
import aiohttp
import json
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
accuracy_stats = {"total": 0, "correct": 0}

class KnowledgeBase:
    @staticmethod
    def load_articles():
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            with open(KNOWLEDGE_FILE, 'r', encoding='utf-8') as f:
                content = f.read()
            articles = content.split('==================================================')
            return [article.strip() for article in articles if article.strip()]
        except FileNotFoundError:
            logger.error("–§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
    
    @staticmethod
    def search_articles(query):
        """–ò—â–µ—Ç —Å—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        articles = KnowledgeBase.load_articles()
        relevant_articles = []
        
        for article in articles:
            score = KnowledgeBase.calculate_relevance(article, query)
            if score > 0:
                relevant_articles.append((article, score))
        
        relevant_articles.sort(key=lambda x: x[1], reverse=True)
        return [article[0] for article in relevant_articles]
    
    @staticmethod
    def calculate_relevance(article, query):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å–∏ –∑–∞–ø—Ä–æ—Å—É"""
        query_words = set(query.lower().split())
        article_lower = article.lower()
        
        score = 0
        for word in query_words:
            if len(word) > 3:
                score += article_lower.count(word) * len(word)
        
        if query.lower() in article_lower:
            score += 100
        
        return score
    
    @staticmethod
    def extract_script(article):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏"""
        lines = article.split('\n')
        script_lines = []
        
        # –ò—â–µ–º –±–ª–æ–∫–∏ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        for i, line in enumerate(lines):
            line_lower = line.lower()
            if any(keyword in line_lower for keyword in ['üí¨', '—á—Ç–æ —Å–∫–∞–∑–∞—Ç—å', '—Å–∫—Ä–∏–ø—Ç', '—Ä–µ—á—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–¥–µ–π—Å—Ç–≤–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞']):
                # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 3-5 —Å—Ç—Ä–æ–∫ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
                for j in range(i+1, min(i+6, len(lines))):
                    if lines[j].strip() and not lines[j].startswith('---') and '===' not in lines[j]:
                        script_lines.append(lines[j].strip())
                break
        
        return '\n'.join(script_lines) if script_lines else None

class ResponseGenerator:
    @staticmethod
    async def generate_response(question):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        relevant_articles = KnowledgeBase.search_articles(question)
        
        if relevant_articles:
            best_article = relevant_articles[0]
            content = ResponseGenerator.extract_main_content(best_article)
            script = KnowledgeBase.extract_script(best_article)
            title = ResponseGenerator.get_article_title(best_article)
            
            return content, script, title
        
        # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
        ai_response = await ResponseGenerator.ask_huggingface(question)
        if ai_response:
            return ai_response, None, "–ù–µ–π—Ä–æ—Å–µ—Ç—å"
        else:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", None, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    @staticmethod
    def extract_main_content(article):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏"""
        lines = article.split('\n')
        content_lines = []
        in_content = False
        
        for line in lines:
            if '–°–û–î–ï–†–ñ–ê–ù–ò–ï:' in line or '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' in line:
                in_content = True
                continue
            if in_content and line.strip():
                if line.startswith('---') or '========' in line:
                    break
                if len(line.strip()) > 10:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏
                    content_lines.append(line.strip())
        
        if content_lines:
            return '\n'.join(content_lines[:10])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ –∑–Ω–∞—á–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏
        meaningful_lines = []
        for line in lines:
            if line.strip() and len(line.strip()) > 20 and not line.startswith(('===', '---', '–ú–û', '–ü–æ–∏—Å–∫')):
                meaningful_lines.append(line.strip())
            if len(meaningful_lines) >= 5:
                break
        
        return '\n'.join(meaningful_lines) if meaningful_lines else article[:300] + "..."
    
    @staticmethod
    def get_article_title(article):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏"""
        lines = article.split('\n')
        for line in lines:
            if '–°–¢–ê–¢–¨–Ø' in line and ':' in line:
                return line.split(':', 1)[1].strip()
            if '–ó–∞–≥–æ–ª–æ–≤–æ–∫:' in line:
                return line.split(':', 1)[1].strip()
        return "–°—Ç–∞—Ç—å—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
    
    @staticmethod
    async def ask_huggingface(prompt):
        """–ó–∞–ø—Ä–æ—Å –∫ HuggingFace API"""
        try:
            headers = {"Authorization": f"Bearer {HUGGINGFACE_API_KEY}"}
            payload = {
                "inputs": prompt,
                "parameters": {
                    "max_length": MAX_RESPONSE_LENGTH,
                    "min_length": 50,
                    "do_sample": False,
                    "temperature": 0.7
                }
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    HUGGINGFACE_API_URL, 
                    headers=headers, 
                    json=payload,
                    timeout=REQUEST_TIMEOUT
                ) as response:
                    
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"HuggingFace response: {result}")
                        
                        if isinstance(result, list) and len(result) > 0:
                            if 'generated_text' in result[0]:
                                return result[0]['generated_text']
                            else:
                                return str(result[0])
                        else:
                            return str(result)
                    else:
                        error_text = await response.text()
                        logger.error(f"HuggingFace API error {response.status}: {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.error("Timeout from HuggingFace API")
            return None
        except Exception as e:
            logger.error(f"HuggingFace request error: {e}")
            return None

class DatabaseManager:
    @staticmethod
    def init_db():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(USER_DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                is_admin BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
    
    @staticmethod
    def save_user(user_id, username, first_name):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        conn = sqlite3.connect(USER_DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, is_admin)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, user_id in ADMIN_IDS))
        
        conn.commit()
        conn.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton(text="üîç –°–æ–≤–µ—Ç –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä—É", callback_data="conversation_tips")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏", callback_data="accuracy_stats")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])

def admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É", callback_data="update_base")],
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É", callback_data="clear_base")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã", callback_data="export_base")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def accuracy_keyboard(message_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"correct_{message_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"incorrect_{message_id}")
        ]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    DatabaseManager.save_user(user_id, message.from_user.username, user_name)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(KNOWLEDGE_FILE):
        with open(KNOWLEDGE_FILE, 'w', encoding='utf-8') as f:
            f.write("=== –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô ===\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    articles_count = len(KnowledgeBase.load_articles())
    
    await message.answer(
        f"ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b>\n\n"
        f"–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ú–æ—Å–û–±–ª–ï–ò–†–¶\n\n"
        f"üìö –°—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ: <b>{articles_count}</b>\n"
        f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: <b>{get_accuracy()}</b>",
        reply_markup=main_menu_keyboard()
    )

@dp.callback_query(lambda c: c.data == "ask_question")
async def ask_question(callback: types.CallbackQuery):
    await callback.message.answer(
        "üí¨ <b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ ¬´–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π?¬ª\n"
        "‚Ä¢ ¬´–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏?¬ª\n"
        "‚Ä¢ ¬´–ö–∞–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç?¬ª\n"
        "‚Ä¢ ¬´–ß—Ç–æ —Ç–∞–∫–æ–µ –õ–ö–ö –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?¬ª"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "conversation_tips")
async def conversation_tips(callback: types.CallbackQuery):
    tips = """
üéØ <b>–°–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º:</b>

1. <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</b>: ¬´–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–µ–Ω—è –∑–æ–≤—É—Ç [–ò–º—è], –∫–æ–º–ø–∞–Ω–∏—è –ú–æ—Å–û–±–ª–ï–ò–†–¶. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?¬ª

2. <b>–ê–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ</b>:
   ‚Ä¢ ¬´–ü–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å...¬ª
   ‚Ä¢ ¬´–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...¬ª
   ‚Ä¢ ¬´–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ...¬ª

3. <b>–ß–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã</b>:
   ‚Ä¢ ¬´–î–∞, —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ...¬ª
   ‚Ä¢ ¬´–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç...¬ª
   ‚Ä¢ ¬´–î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ...¬ª

4. <b>–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º</b>:
   ‚Ä¢ ¬´–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é...¬ª
   ‚Ä¢ ¬´–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç...¬ª
   ‚Ä¢ ¬´–ú–æ–∂–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É...¬ª

5. <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</b>:
   ‚Ä¢ ¬´–í—Å–µ –ª–∏ –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ?¬ª
   ‚Ä¢ ¬´–ï—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?¬ª
   ‚Ä¢ ¬´–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!¬ª
"""
    await callback.message.answer(tips)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "accuracy_stats")
async def show_accuracy(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    
    articles_count = len(KnowledgeBase.load_articles())
    last_update = get_last_update_time()
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>

‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: <b>{accuracy_stats['total']}</b>
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{accuracy_stats['correct']}</b>
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: <b>{get_accuracy()}</b>
‚Ä¢ –°—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ: <b>{articles_count}</b>
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>{last_update}</b>

üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞' if articles_count > 0 else '‚ùå –¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'}
‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç—å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if HUGGINGFACE_API_KEY else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}
"""
    await callback.message.answer(stats_text)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admin_panel")
async def admin_panel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    
    await callback.message.answer(
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞",
        reply_markup=admin_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "update_base")
async def update_base(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    
    await callback.message.answer(
        "üîÑ <b>–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...</b>\n\n"
        "–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π.\n"
        "–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–µ—Ä."
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_knowledge = """=== –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô - –¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø ===
–í—Ä–µ–º—è —Å–±–æ—Ä–∞: 2024-01-01 12:00:00
–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 3 —Å—Ç–∞—Ç–µ–π
==================================================

–°–¢–ê–¢–¨–Ø 1: –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –ü–£
URL: https://mes1-kms.interrao.ru/content/space/7/article/8352
–ó–∞–≥–æ–ª–æ–≤–æ–∫: –°–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π
–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 12:00:00
---
–°–û–î–ï–†–ñ–ê–ù–ò–ï:
–ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –ü–£ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –º–æ–∂–Ω–æ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:
‚Ä¢ –í –õ–ö–ö –Ω–∞ —Å–∞–π—Ç–µ –º–æ—Å–æ–±–ª–µ–∏—Ä—Ü.—Ä—Ñ
‚Ä¢ –í –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ¬´–ú–æ—Å–û–±–ª–ï–ò–†–¶ –û–Ω–ª–∞–π–Ω¬ª
‚Ä¢ –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –ö–¶ 8(499)444-01-00 (–≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫)
‚Ä¢ –° –ø–æ–º–æ—â—å—é —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ
‚Ä¢ –í –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—Ñ–∏—Å–∞—Ö –ú–æ—Å–û–±–ª–ï–ò–†–¶

üí¨ –ß—Ç–æ —Å–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É:
¬´–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞.¬ª

---
==================================================

–°–¢–ê–¢–¨–Ø 2: –û–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤
URL: https://mes1-kms.interrao.ru/content/space/7/article/8185
–ó–∞–≥–æ–ª–æ–≤–æ–∫: –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 12:00:00
---
–°–û–î–ï–†–ñ–ê–ù–ò–ï:
–û–ø–ª–∞—Ç–∏—Ç—å –ï–ü–î –º–æ–∂–Ω–æ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:
–ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏:
‚Ä¢ –í –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ¬´–ú–æ—Å–û–±–ª–ï–ò–†–¶ –û–Ω–ª–∞–π–Ω¬ª
‚Ä¢ –ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ
‚Ä¢ –í –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—Ñ–∏—Å–∞—Ö —á–µ—Ä–µ–∑ POS-—Ç–µ—Ä–º–∏–Ω–∞–ª—ã
‚Ä¢ –ß–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã –±–∞–Ω–∫–æ–≤

üí¨ –ß—Ç–æ —Å–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É:
¬´–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –º–æ–∂–Ω–æ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –Ω–∞—à–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ.¬ª

---
==================================================

–°–¢–ê–¢–¨–Ø 3: –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
URL: https://mes1-kms.interrao.ru/content/space/7/article/8536
–ó–∞–≥–æ–ª–æ–≤–æ–∫: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –õ–ö–ö
–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 12:00:00
---
–°–û–î–ï–†–ñ–ê–ù–ò–ï:
–õ–ö–ö ‚Äì —É–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ñ–ö–• –≤ –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ.
–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –û–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤
‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –ü–£
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ–∫ –∏ –≤—ã–ø–∏—Å–æ–∫

üí¨ –ß—Ç–æ —Å–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É:
¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ —Å—á–µ—Ç–∞–º–∏ –æ–Ω–ª–∞–π–Ω.¬ª

---
==================================================
"""
    
    with open(KNOWLEDGE_FILE, 'w', encoding='utf-8') as f:
        f.write(test_knowledge)
    
    await callback.message.answer("‚úÖ <b>–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "clear_base")
async def clear_base(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")
        ]
    ])
    
    await callback.message.answer(
        "‚ö†Ô∏è <b>–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=confirm_keyboard
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "export_base")
async def export_base(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    
    try:
        if os.path.exists(KNOWLEDGE_FILE):
            with open(KNOWLEDGE_FILE, 'rb') as file:
                await callback.message.answer_document(
                    types.BufferedInputFile(
                        file.read(),
                        filename=f"knowledge_export_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
                    ),
                    caption="üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b>"
                )
        else:
            await callback.message.answer("‚ùå –§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    articles_count = len(KnowledgeBase.load_articles())
    
    await callback.message.answer(
        f"ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"üìö –°—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ: <b>{articles_count}</b>\n"
        f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: <b>{get_accuracy()}</b>",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.message()
async def handle_questions(message: types.Message):
    if message.text.startswith('/'):
        return
    
    question = message.text.strip()
    user_id = message.from_user.id
    
    if not question:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
    thinking_msg = await message.answer("üîç <i>–ò—â—É –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...</i>")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response, script, source = await ResponseGenerator.generate_response(question)
        
        if not response:
            await thinking_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"ü§ñ <b>–û—Ç–≤–µ—Ç:</b>\n{response}"
        if source and source != "–ù–µ–π—Ä–æ—Å–µ—Ç—å":
            response_text += f"\n\nüìö <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}"
        
        await thinking_msg.edit_text(response_text)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if script:
            await message.answer(f"üí¨ <b>–ß—Ç–æ —Å–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É:</b>\n{script}")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        accuracy_stats["total"] += 1
        await message.answer(
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –æ—Ç–≤–µ—Ç–∏–ª?",
            reply_markup=accuracy_keyboard(accuracy_stats["total"])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await thinking_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@dp.callback_query(lambda c: c.data.startswith(('correct_', 'incorrect_')))
async def handle_accuracy_feedback(callback: types.CallbackQuery):
    action, count = callback.data.split('_')
    
    if action == "correct":
        accuracy_stats["correct"] += 1
        await callback.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –û—Ç–≤–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")
    else:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        question = callback.message.reply_to_message.text
        admin_message = (
            f"‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞</b>\n\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.first_name}\n"
            f"üÜî User ID: {callback.from_user.id}\n"
            f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, admin_message)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
        
        await callback.message.edit_text(
            "‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—à–∏–±–∫–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É —Å—Ç–∞—Ä—à–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
        )
    
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_accuracy():
    if accuracy_stats["total"] == 0:
        return "0%"
    accuracy = (accuracy_stats["correct"] / accuracy_stats["total"]) * 100
    return f"{accuracy:.1f}%"

def get_last_update_time():
    try:
        with open(KNOWLEDGE_FILE, 'r', encoding='utf-8') as f:
            for line in f:
                if '–í—Ä–µ–º—è —Å–±–æ—Ä–∞:' in line:
                    return line.split('–í—Ä–µ–º—è —Å–±–æ—Ä–∞: ')[1].strip()
    except:
        pass
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('database', exist_ok=True)
    os.makedirs('logs', exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    DatabaseManager.init_db()
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ú–æ—Å–û–±–ª–ï–ò–†–¶...")
    logger.info(f"Telegram Bot Token: {TELEGRAM_BOT_TOKEN[:10]}...")
    logger.info(f"HuggingFace API Key: {HUGGINGFACE_API_KEY[:10]}...")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
